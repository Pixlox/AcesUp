<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/acesup.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/acesup.js" />
              <option name="originalContent" value="class Tableau {&#10;    constructor(numStacks = 4) {&#10;        this.stacks = [];&#10;        for (let i = 0; i &lt; numStacks; i++) {&#10;            this.stacks[i] = [];&#10;        }&#10;    }&#10;&#10;    addCardToStack(stackIndex, card) {&#10;        this.stacks[stackIndex].push(card);&#10;    }&#10;&#10;    getStack(stackIndex) {&#10;        return this.stacks[stackIndex];&#10;    }&#10;&#10;    getTopCard(stackIndex) {&#10;        const stack = this.stacks[stackIndex];&#10;        return stack.length &gt; 0 ? stack[stack.length - 1] : null;&#10;    }&#10;&#10;    removeTopCard(stackIndex) {&#10;        return this.stacks[stackIndex].pop();&#10;    }&#10;&#10;    isStackEmpty(stackIndex) {&#10;        return this.stacks[stackIndex].length === 0;&#10;    }&#10;&#10;    clear() {&#10;        this.stacks.forEach(stack =&gt; stack.length = 0);&#10;    }&#10;&#10;    getAllCards() {&#10;        return this.stacks.flat();&#10;    }&#10;}&#10;&#10;class Move {&#10;    constructor(type, data) {&#10;        this.type = type;&#10;        this.data = data;&#10;    }&#10;}&#10;&#10;class MoveHistory {&#10;    constructor() {&#10;        this.undoMoves = [];&#10;        this.redoMoves = [];&#10;    }&#10;&#10;    addMove(move) {&#10;        this.undoMoves.push(move);&#10;        this.redoMoves = [];&#10;    }&#10;&#10;    canUndo() {&#10;        return this.undoMoves.length &gt; 0;&#10;    }&#10;&#10;    canRedo() {&#10;        return this.redoMoves.length &gt; 0;&#10;    }&#10;&#10;    getUndoMove() {&#10;        if (this.canUndo()) {&#10;            const move = this.undoMoves.pop();&#10;            this.redoMoves.push(move);&#10;            return move;&#10;        }&#10;        return null;&#10;    }&#10;&#10;    getRedoMove() {&#10;        if (this.canRedo()) {&#10;            const move = this.redoMoves.pop();&#10;            this.undoMoves.push(move);&#10;            return move;&#10;        }&#10;        return null;&#10;    }&#10;&#10;    clear() {&#10;        this.undoMoves = [];&#10;        this.redoMoves = [];&#10;    }&#10;}&#10;&#10;class GameState {&#10;    constructor() {&#10;        this.selectedCard = null;&#10;        this.selectedStack = null;&#10;        this.moves = 0;&#10;        this.gameStarted = false;&#10;        this.gameWon = false;&#10;        this.gameLost = false;&#10;        this.startTime = null;&#10;        this.timer = null;&#10;        this.hintCard = null;&#10;        this.hintStack = null;&#10;    }&#10;&#10;    reset() {&#10;        this.selectedCard = null;&#10;        this.selectedStack = null;&#10;        this.moves = 0;&#10;        this.gameStarted = false;&#10;        this.gameWon = false;&#10;        this.gameLost = false;&#10;        this.startTime = null;&#10;        if (this.timer) {&#10;            clearInterval(this.timer);&#10;            this.timer = null;&#10;        }&#10;        this.hintCard = null;&#10;        this.hintStack = null;&#10;    }&#10;&#10;    selectCard(card, stackIndex) {&#10;        this.selectedCard = card;&#10;        this.selectedStack = stackIndex;&#10;    }&#10;&#10;    clearSelection() {&#10;        this.selectedCard = null;&#10;        this.selectedStack = null;&#10;    }&#10;&#10;    incrementMoves() {&#10;        this.moves++;&#10;        this.updateMovesDisplay();&#10;    }&#10;&#10;    decrementMoves() {&#10;        if (this.moves &gt; 0) {&#10;            this.moves--;&#10;            this.updateMovesDisplay();&#10;        }&#10;    }&#10;&#10;    startGame() {&#10;        if (!this.gameStarted) {&#10;            this.gameStarted = true;&#10;            this.startTime = Date.now();&#10;            this.startTimer();&#10;        }&#10;    }&#10;&#10;    startTimer() {&#10;        this.timer = setInterval(() =&gt; {&#10;            if (!this.gameWon &amp;&amp; !this.gameLost) {&#10;                this.updateTimeDisplay();&#10;            }&#10;        }, 1000);&#10;    }&#10;&#10;    updateMovesDisplay() {&#10;        const movesElement = document.getElementById('moves');&#10;        if (movesElement) {&#10;            movesElement.textContent = `Moves: ${this.moves}`;&#10;        }&#10;    }&#10;&#10;    updateTimeDisplay() {&#10;        const timerElement = document.getElementById('timer');&#10;        if (timerElement &amp;&amp; this.startTime) {&#10;            const elapsed = Math.floor((Date.now() - this.startTime) / 1000);&#10;            timerElement.textContent = `Time: ${elapsed}s`;&#10;        }&#10;    }&#10;}&#10;&#10;class Game {&#10;    constructor() {&#10;        this.deck = new Deck();&#10;        this.tableau = new Tableau();&#10;        this.gameState = new GameState();&#10;        this.moveHistory = new MoveHistory();&#10;        this.stackElements = [&#10;            document.getElementById(&quot;stack-1&quot;),&#10;            document.getElementById(&quot;stack-2&quot;),&#10;            document.getElementById(&quot;stack-3&quot;),&#10;            document.getElementById(&quot;stack-4&quot;)&#10;        ];&#10;        this.stockElement = document.getElementById(&quot;stockpile&quot;);&#10;        this.messageArea = document.getElementById(&quot;message-area&quot;);&#10;        this.hintTimeout = null;&#10;        this.hintStockpile = false;&#10;&#10;        this.setupEventListeners();&#10;        this.newGame();&#10;    }&#10;&#10;    setupEventListeners() {&#10;        document.getElementById(&quot;newgame-btn&quot;).addEventListener(&quot;click&quot;, () =&gt; this.newGame());&#10;        this.stockElement.addEventListener(&quot;click&quot;, () =&gt; this.deal());&#10;        document.getElementById(&quot;hint-btn&quot;)?.addEventListener(&quot;click&quot;, () =&gt; this.showHint());&#10;        document.getElementById(&quot;undo-btn&quot;)?.addEventListener(&quot;click&quot;, () =&gt; this.undo());&#10;        document.getElementById(&quot;redo-btn&quot;)?.addEventListener(&quot;click&quot;, () =&gt; this.redo());&#10;    }&#10;&#10;    newGame() {&#10;        this.gameState.reset();&#10;        this.moveHistory.clear();&#10;        this.clearHintHighlight();&#10;        this.hideMessage();&#10;        this.deck = new Deck();&#10;        this.tableau.clear();&#10;&#10;        for (let i = 0; i &lt; 4; i++) {&#10;            const card = this.deck.drawCard();&#10;            if (card) {&#10;                this.ensureCardFaceUp(card);&#10;                this.tableau.addCardToStack(i, card);&#10;            }&#10;        }&#10;&#10;        this.render();&#10;        this.gameState.updateMovesDisplay();&#10;        this.gameState.updateTimeDisplay();&#10;        this.updateButtons();&#10;    }&#10;&#10;    deal() {&#10;        if (this.deck.isEmpty() || this.gameState.gameWon || this.gameState.gameLost) {&#10;            return;&#10;        }&#10;&#10;        this.gameState.startGame();&#10;        this.clearHintHighlight();&#10;&#10;        const dealtCards = [];&#10;        &#10;        for (let i = 0; i &lt; 4; i++) {&#10;            if (!this.deck.isEmpty()) {&#10;                const card = this.deck.drawCard();&#10;                this.ensureCardFaceUp(card);&#10;                this.tableau.addCardToStack(i, card);&#10;                dealtCards.push(card);&#10;            }&#10;        }&#10;&#10;        if (dealtCards.length &gt; 0) {&#10;            this.moveHistory.addMove(new Move('deal', { cards: dealtCards }));&#10;            this.gameState.incrementMoves();&#10;        }&#10;&#10;        this.gameState.clearSelection();&#10;        this.render();&#10;        this.updateButtons();&#10;        this.checkEndgameConditions();&#10;    }&#10;&#10;    canRemove(card, stackIndex) {&#10;        const cardSuit = card.getSuit();&#10;        const cardValue = card.getValue();&#10;        for (let i = 0; i &lt; 4; i++) {&#10;            if (i === stackIndex) continue;&#10;            const topCard = this.tableau.getTopCard(i);&#10;            if (topCard &amp;&amp; topCard.getSuit() === cardSuit &amp;&amp; topCard.getValue() &gt; cardValue) {&#10;                return true;&#10;            }&#10;        }&#10;        return false;&#10;    }&#10;&#10;    canMove(card, fromStack, toStack) {&#10;        const topCard = this.tableau.getTopCard(fromStack);&#10;        return topCard === card &amp;&amp; this.tableau.isStackEmpty(toStack);&#10;    }&#10;&#10;    removeCard(stackIndex) {&#10;        const topCard = this.tableau.getTopCard(stackIndex);&#10;        if (!topCard || topCard.getRank() === 'A') {&#10;            return false;&#10;        }&#10;        if (this.canRemove(topCard, stackIndex)) {&#10;            this.moveHistory.addMove(new Move('remove', { card: topCard, fromStack: stackIndex }));&#10;            this.tableau.removeTopCard(stackIndex);&#10;            this.gameState.incrementMoves();&#10;            this.render();&#10;            this.updateButtons();&#10;            this.checkEndgameConditions();&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    moveCard(fromStack, toStack) {&#10;        const card = this.tableau.getTopCard(fromStack);&#10;        if (this.canMove(card, fromStack, toStack)) {&#10;            this.moveHistory.addMove(new Move('move', { card: card, fromStack: fromStack, toStack: toStack }));&#10;            const movedCard = this.tableau.removeTopCard(fromStack);&#10;            this.tableau.addCardToStack(toStack, movedCard);&#10;            this.gameState.incrementMoves();&#10;            this.render();&#10;            this.updateButtons();&#10;            this.checkEndgameConditions();&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    handleCardClick(card, stackIndex) {&#10;        if (this.gameState.gameWon || this.gameState.gameLost) {&#10;            return;&#10;        }&#10;        this.gameState.startGame();&#10;        this.clearHintHighlight();&#10;&#10;        if (!this.gameState.selectedCard) {&#10;            if (this.removeCard(stackIndex)) {&#10;                return;&#10;            }&#10;            this.gameState.selectCard(card, stackIndex);&#10;            this.render();&#10;        } else {&#10;            if (this.gameState.selectedStack === stackIndex) {&#10;                this.gameState.clearSelection();&#10;                this.render();&#10;            } else {&#10;                if (this.tableau.isStackEmpty(stackIndex)) {&#10;                    if (this.moveCard(this.gameState.selectedStack, stackIndex)) {&#10;                        this.gameState.clearSelection();&#10;                    }&#10;                } else {&#10;                    if (this.removeCard(stackIndex)) {&#10;                        this.gameState.clearSelection();&#10;                        return;&#10;                    }&#10;                    this.gameState.selectCard(card, stackIndex);&#10;                    this.render();&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    handleEmptyStackClick(stackIndex) {&#10;        if (this.gameState.gameWon || this.gameState.gameLost) {&#10;            return;&#10;        }&#10;        if (this.gameState.selectedCard) {&#10;            if (this.moveCard(this.gameState.selectedStack, stackIndex)) {&#10;                this.gameState.clearSelection();&#10;            }&#10;        }&#10;    }&#10;&#10;    undo() {&#10;        const move = this.moveHistory.getUndoMove();&#10;        if (!move) return;&#10;        console.log(&quot;undid deal!&quot;);&#10;        console.log(move.data);&#10;&#10;        switch (move.type) {&#10;            case 'deal':&#10;                for (let i = 3; i &gt;= 0; i--) {&#10;                    if (!this.tableau.isStackEmpty(i)) {&#10;                        const card = this.tableau.removeTopCard(i);&#10;                        this.deck.addCardToTop(card);&#10;                    }&#10;                }&#10;                break;&#10;            case 'remove':&#10;                this.tableau.addCardToStack(move.data.fromStack, move.data.card);&#10;                break;&#10;            case 'move':&#10;                const card = this.tableau.removeTopCard(move.data.toStack);&#10;                this.tableau.addCardToStack(move.data.fromStack, card);&#10;                break;&#10;        }&#10;&#10;        this.gameState.decrementMoves();&#10;        this.gameState.clearSelection();&#10;        this.clearHintHighlight();&#10;        this.render();&#10;        this.updateButtons();&#10;        this.checkEndgameConditions();&#10;    }&#10;&#10;    redo() {&#10;        const move = this.moveHistory.getRedoMove();&#10;        if (!move) return;&#10;&#10;        console.log(&quot;redid deal!&quot;);&#10;        console.log(move.data);&#10;        &#10;        switch (move.type) {&#10;            case 'deal':&#10;                for (let i = 0; i &lt; 4; i++) {&#10;                    if (!this.deck.isEmpty()) {&#10;                        const card = this.deck.drawCard();&#10;                        this.ensureCardFaceUp(card);&#10;                        this.tableau.addCardToStack(i, card);&#10;                    }&#10;                }&#10;                break;&#10;            case 'remove':&#10;                this.tableau.removeTopCard(move.data.fromStack);&#10;                break;&#10;            case 'move':&#10;                const card = this.tableau.removeTopCard(move.data.fromStack);&#10;                this.tableau.addCardToStack(move.data.toStack, card);&#10;                break;&#10;        }&#10;&#10;        this.gameState.incrementMoves();&#10;        this.gameState.clearSelection();&#10;        this.clearHintHighlight();&#10;        this.render();&#10;        this.updateButtons();&#10;        this.checkEndgameConditions();&#10;    }&#10;&#10;    checkWin() {&#10;        const allCards = this.tableau.getAllCards();&#10;        if (allCards.length === 4) {&#10;            return allCards.every(card =&gt; card.getRank() === 'A');&#10;        }&#10;        return false;&#10;    }&#10;&#10;    checkLoss() {&#10;        if (!this.deck.isEmpty()) {&#10;            return false;&#10;        }&#10;        for (let i = 0; i &lt; 4; i++) {&#10;            const topCard = this.tableau.getTopCard(i);&#10;            if (topCard &amp;&amp; this.canRemove(topCard, i)) {&#10;                return false;&#10;            }&#10;        }&#10;        for (let fromStack = 0; fromStack &lt; 4; fromStack++) {&#10;            const topCard = this.tableau.getTopCard(fromStack);&#10;            if (topCard) {&#10;                for (let toStack = 0; toStack &lt; 4; toStack++) {&#10;                    if (fromStack !== toStack &amp;&amp; this.canMove(topCard, fromStack, toStack)) {&#10;                        return false;&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        return true;&#10;    }&#10;&#10;    checkEndgameConditions() {&#10;        if (this.checkWin()) {&#10;            this.gameState.gameWon = true;&#10;            this.showMessage(&quot;Congrats! You won! :D&quot;, &quot;success&quot;);&#10;        } else if (this.checkLoss()) {&#10;            this.gameState.gameLost = true;&#10;            this.showMessage(&quot;Game Over! It's okay, better luck next time :(&quot;, &quot;failure&quot;);&#10;        }&#10;    }&#10;&#10;    showMessage(text, type) {&#10;        this.messageArea.textContent = text;&#10;        this.messageArea.className = &quot;&quot;;&#10;        this.messageArea.classList.add(type);&#10;        this.messageArea.classList.remove(&quot;hidden&quot;);&#10;    }&#10;&#10;    hideMessage() {&#10;        this.messageArea.classList.add(&quot;hidden&quot;);&#10;    }&#10;&#10;    ensureCardFaceUp(card) {&#10;        if (!card.getVisible()) {&#10;            card.flip();&#10;        }&#10;    }&#10;&#10;    clearHintHighlight() {&#10;        if (this.hintTimeout) {&#10;            clearTimeout(this.hintTimeout);&#10;            this.hintTimeout = null;&#10;        }&#10;        this.gameState.hintCard = null;&#10;        this.gameState.hintStack = null;&#10;        this.hintStockpile = false;&#10;    }&#10;&#10;    updateButtons() {&#10;        const undoBtn = document.getElementById(&quot;undo-btn&quot;);&#10;        const redoBtn = document.getElementById(&quot;redo-btn&quot;);&#10;&#10;        if (undoBtn) {&#10;            if (this.moveHistory.canUndo()) {&#10;                undoBtn.disabled = false;&#10;            } else {&#10;                undoBtn.disabled = true;&#10;            }&#10;        }&#10;&#10;        if (redoBtn) {&#10;            if (this.moveHistory.canRedo()) {&#10;                redoBtn.disabled = false;&#10;            } else {&#10;                redoBtn.disabled = true;&#10;            }&#10;        }&#10;    }&#10;&#10;    render() {&#10;        for (let i = 0; i &lt; 4; i++) {&#10;            const stackElement = this.stackElements[i];&#10;            stackElement.innerHTML = &quot;&quot;;&#10;            const stack = this.tableau.getStack(i);&#10;&#10;            if (stack.length === 0) {&#10;                stackElement.addEventListener(&quot;click&quot;, () =&gt; this.handleEmptyStackClick(i));&#10;                const emptyIndicator = document.createElement(&quot;div&quot;);&#10;                emptyIndicator.classList.add(&quot;empty-indicator&quot;);&#10;                emptyIndicator.textContent = &quot;Empty&quot;;&#10;                stackElement.appendChild(emptyIndicator);&#10;            } else {&#10;                stackElement.style.cursor = &quot;default&quot;;&#10;                stack.forEach((card, index) =&gt; {&#10;                    const cardElement = document.createElement(&quot;img&quot;);&#10;                    if (card.getVisible()) {&#10;                        cardElement.src = &quot;assets/&quot; + card.getImageRef();&#10;                    } else {&#10;                        cardElement.src = &quot;assets/cardBackRed.png&quot;;&#10;                    }&#10;                    cardElement.classList.add(&quot;card&quot;);&#10;                    cardElement.style.top = `${index * 28}px`;&#10;                    cardElement.style.zIndex = index;&#10;&#10;                    if (this.gameState.selectedCard === card) {&#10;                        cardElement.classList.add(&quot;selected-card&quot;);&#10;                    }&#10;                    if (this.gameState.hintCard === card) {&#10;                        cardElement.classList.add(&quot;hint-card&quot;);&#10;                    }&#10;&#10;                    if (index === stack.length - 1) {&#10;                        cardElement.style.cursor = &quot;pointer&quot;;&#10;                        cardElement.addEventListener(&quot;click&quot;, () =&gt; this.handleCardClick(card, i));&#10;                    }&#10;&#10;                    stackElement.appendChild(cardElement);&#10;                });&#10;            }&#10;        }&#10;&#10;        this.stockElement.innerHTML = &quot;&quot;;&#10;        if (!this.deck.isEmpty()) {&#10;            const stockImg = document.createElement(&quot;img&quot;);&#10;            stockImg.src = &quot;assets/cardBackRed.png&quot;;&#10;&#10;            this.stockElement.classList.remove(&quot;empty&quot;);&#10;            if (this.hintStockpile) {&#10;                stockImg.classList.add(&quot;hint-card&quot;);&#10;            }&#10;            this.stockElement.appendChild(stockImg);&#10;&#10;            // Add stock counter&#10;            const stockCounter = document.createElement(&quot;div&quot;);&#10;            stockCounter.id = &quot;stock-counter&quot;;&#10;            stockCounter.textContent = this.deck.getSize();&#10;            this.stockElement.appendChild(stockCounter);&#10;&#10;            this.stockElement.style.cursor = &quot;pointer&quot;;&#10;        } else {&#10;            this.stockElement.classList.add(&quot;empty&quot;);&#10;            this.stockElement.textContent = &quot;Empty&quot;;&#10;            this.stockElement.style.cursor = &quot;default&quot;;&#10;        }&#10;    }&#10;&#10;    showHint() {&#10;        this.clearHintHighlight();&#10;&#10;        for (let i = 0; i &lt; 4; i++) {&#10;            const topCard = this.tableau.getTopCard(i);&#10;            if (topCard &amp;&amp; this.canRemove(topCard, i)) {&#10;                this.gameState.hintCard = topCard;&#10;                this.gameState.hintStack = i;&#10;                this.render();&#10;                this.hintTimeout = setTimeout(() =&gt; {&#10;                    this.clearHintHighlight();&#10;                    this.render();&#10;                }, 2000);&#10;                return;&#10;            }&#10;        }&#10;        for (let fromStack = 0; fromStack &lt; 4; fromStack++) {&#10;            const topCard = this.tableau.getTopCard(fromStack);&#10;            if (topCard) {&#10;                for (let toStack = 0; toStack &lt; 4; toStack++) {&#10;                    if (fromStack !== toStack &amp;&amp; this.canMove(topCard, fromStack, toStack)) {&#10;                        this.gameState.hintCard = topCard;&#10;                        this.gameState.hintStack = fromStack;&#10;                        this.render();&#10;                        this.hintTimeout = setTimeout(() =&gt; {&#10;                            this.clearHintHighlight();&#10;                            this.render();&#10;                        }, 2000);&#10;                        return;&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        if (!this.deck.isEmpty()) {&#10;            this.hintStockpile = true;&#10;            this.render();&#10;            this.hintTimeout = setTimeout(() =&gt; {&#10;                this.clearHintHighlight();&#10;                this.render();&#10;            }, 2000);&#10;        }&#10;    }&#10;}&#10;&#10;window.addEventListener(&quot;DOMContentLoaded&quot;, () =&gt; {&#10;    const game = new Game();&#10;});" />
              <option name="updatedContent" value="class Tableau {&#10;    constructor(numStacks = 4) {&#10;        this.stacks = [];&#10;        for (let i = 0; i &lt; numStacks; i++) {&#10;            this.stacks[i] = [];&#10;        }&#10;    }&#10;&#10;    addCardToStack(stackIndex, card) {&#10;        this.stacks[stackIndex].push(card);&#10;    }&#10;&#10;    getStack(stackIndex) {&#10;        return this.stacks[stackIndex];&#10;    }&#10;&#10;    getTopCard(stackIndex) {&#10;        const stack = this.stacks[stackIndex];&#10;        return stack.length &gt; 0 ? stack[stack.length - 1] : null;&#10;    }&#10;&#10;    removeTopCard(stackIndex) {&#10;        return this.stacks[stackIndex].pop();&#10;    }&#10;&#10;    isStackEmpty(stackIndex) {&#10;        return this.stacks[stackIndex].length === 0;&#10;    }&#10;&#10;    clear() {&#10;        this.stacks.forEach(stack =&gt; stack.length = 0);&#10;    }&#10;&#10;    getAllCards() {&#10;        return this.stacks.flat();&#10;    }&#10;}&#10;&#10;class Move {&#10;    constructor(type, data) {&#10;        this.type = type;&#10;        this.data = data;&#10;    }&#10;}&#10;&#10;class MoveHistory {&#10;    constructor() {&#10;        this.undoMoves = [];&#10;        this.redoMoves = [];&#10;    }&#10;&#10;    addMove(move) {&#10;        this.undoMoves.push(move);&#10;        this.redoMoves = [];&#10;    }&#10;&#10;    canUndo() {&#10;        return this.undoMoves.length &gt; 0;&#10;    }&#10;&#10;    canRedo() {&#10;        return this.redoMoves.length &gt; 0;&#10;    }&#10;&#10;    getUndoMove() {&#10;        if (this.canUndo()) {&#10;            const move = this.undoMoves.pop();&#10;            this.redoMoves.push(move);&#10;            return move;&#10;        }&#10;        return null;&#10;    }&#10;&#10;    getRedoMove() {&#10;        if (this.canRedo()) {&#10;            const move = this.redoMoves.pop();&#10;            this.undoMoves.push(move);&#10;            return move;&#10;        }&#10;        return null;&#10;    }&#10;&#10;    clear() {&#10;        this.undoMoves = [];&#10;        this.redoMoves = [];&#10;    }&#10;}&#10;&#10;class GameState {&#10;    constructor() {&#10;        this.selectedCard = null;&#10;        this.selectedStack = null;&#10;        this.moves = 0;&#10;        this.gameStarted = false;&#10;        this.gameWon = false;&#10;        this.gameLost = false;&#10;        this.startTime = null;&#10;        this.timer = null;&#10;        this.hintCard = null;&#10;        this.hintStack = null;&#10;    }&#10;&#10;    reset() {&#10;        this.selectedCard = null;&#10;        this.selectedStack = null;&#10;        this.moves = 0;&#10;        this.gameStarted = false;&#10;        this.gameWon = false;&#10;        this.gameLost = false;&#10;        this.startTime = null;&#10;        if (this.timer) {&#10;            clearInterval(this.timer);&#10;            this.timer = null;&#10;        }&#10;        this.hintCard = null;&#10;        this.hintStack = null;&#10;    }&#10;&#10;    selectCard(card, stackIndex) {&#10;        this.selectedCard = card;&#10;        this.selectedStack = stackIndex;&#10;    }&#10;&#10;    clearSelection() {&#10;        this.selectedCard = null;&#10;        this.selectedStack = null;&#10;    }&#10;&#10;    incrementMoves() {&#10;        this.moves++;&#10;        this.updateMovesDisplay();&#10;    }&#10;&#10;    decrementMoves() {&#10;        if (this.moves &gt; 0) {&#10;            this.moves--;&#10;            this.updateMovesDisplay();&#10;        }&#10;    }&#10;&#10;    startGame() {&#10;        if (!this.gameStarted) {&#10;            this.gameStarted = true;&#10;            this.startTime = Date.now();&#10;            this.startTimer();&#10;        }&#10;    }&#10;&#10;    startTimer() {&#10;        this.timer = setInterval(() =&gt; {&#10;            if (!this.gameWon &amp;&amp; !this.gameLost) {&#10;                this.updateTimeDisplay();&#10;            }&#10;        }, 1000);&#10;    }&#10;&#10;    updateMovesDisplay() {&#10;        const movesElement = document.getElementById('moves');&#10;        if (movesElement) {&#10;            movesElement.textContent = `Moves: ${this.moves}`;&#10;        }&#10;    }&#10;&#10;    updateTimeDisplay() {&#10;        const timerElement = document.getElementById('timer');&#10;        if (timerElement &amp;&amp; this.startTime) {&#10;            const elapsed = Math.floor((Date.now() - this.startTime) / 1000);&#10;            timerElement.textContent = `Time: ${elapsed}s`;&#10;        }&#10;    }&#10;}&#10;&#10;class Game {&#10;    constructor() {&#10;        this.deck = new Deck();&#10;        this.tableau = new Tableau();&#10;        this.gameState = new GameState();&#10;        this.moveHistory = new MoveHistory();&#10;        this.stackElements = [&#10;            document.getElementById(&quot;stack-1&quot;),&#10;            document.getElementById(&quot;stack-2&quot;),&#10;            document.getElementById(&quot;stack-3&quot;),&#10;            document.getElementById(&quot;stack-4&quot;)&#10;        ];&#10;        this.stockElement = document.getElementById(&quot;stockpile&quot;);&#10;        this.messageArea = document.getElementById(&quot;message-area&quot;);&#10;        this.hintTimeout = null;&#10;        this.hintStockpile = false;&#10;&#10;        this.setupEventListeners();&#10;        this.newGame();&#10;    }&#10;&#10;    setupEventListeners() {&#10;        document.getElementById(&quot;newgame-btn&quot;).addEventListener(&quot;click&quot;, () =&gt; this.newGame());&#10;        this.stockElement.addEventListener(&quot;click&quot;, () =&gt; this.deal());&#10;        document.getElementById(&quot;hint-btn&quot;)?.addEventListener(&quot;click&quot;, () =&gt; this.showHint());&#10;        document.getElementById(&quot;undo-btn&quot;)?.addEventListener(&quot;click&quot;, () =&gt; this.undo());&#10;        document.getElementById(&quot;redo-btn&quot;)?.addEventListener(&quot;click&quot;, () =&gt; this.redo());&#10;    }&#10;&#10;    newGame() {&#10;        this.gameState.reset();&#10;        this.moveHistory.clear();&#10;        this.clearHintHighlight();&#10;        this.hideMessage();&#10;        this.deck = new Deck();&#10;        this.tableau.clear();&#10;&#10;        for (let i = 0; i &lt; 4; i++) {&#10;            const card = this.deck.drawCard();&#10;            if (card) {&#10;                this.ensureCardFaceUp(card);&#10;                this.tableau.addCardToStack(i, card);&#10;            }&#10;        }&#10;&#10;        this.render();&#10;        this.gameState.updateMovesDisplay();&#10;        this.gameState.updateTimeDisplay();&#10;        this.updateButtons();&#10;    }&#10;&#10;    deal() {&#10;        if (this.deck.isEmpty() || this.gameState.gameWon || this.gameState.gameLost) {&#10;            return;&#10;        }&#10;&#10;        this.gameState.startGame();&#10;        this.clearHintHighlight();&#10;&#10;        const dealtCards = [];&#10;        &#10;        for (let i = 0; i &lt; 4; i++) {&#10;            if (!this.deck.isEmpty()) {&#10;                const card = this.deck.drawCard();&#10;                this.ensureCardFaceUp(card);&#10;                this.tableau.addCardToStack(i, card);&#10;                dealtCards.push(card);&#10;            }&#10;        }&#10;&#10;        if (dealtCards.length &gt; 0) {&#10;            this.moveHistory.addMove(new Move('deal', { cards: dealtCards }));&#10;            this.gameState.incrementMoves();&#10;        }&#10;&#10;        this.gameState.clearSelection();&#10;        this.render();&#10;        this.updateButtons();&#10;        this.checkEndgameConditions();&#10;    }&#10;&#10;    canRemove(card, stackIndex) {&#10;        const cardSuit = card.getSuit();&#10;        const cardValue = card.getValue();&#10;        for (let i = 0; i &lt; 4; i++) {&#10;            if (i === stackIndex) continue;&#10;            const topCard = this.tableau.getTopCard(i);&#10;            if (topCard &amp;&amp; topCard.getSuit() === cardSuit &amp;&amp; topCard.getValue() &gt; cardValue) {&#10;                return true;&#10;            }&#10;        }&#10;        return false;&#10;    }&#10;&#10;    canMove(card, fromStack, toStack) {&#10;        const topCard = this.tableau.getTopCard(fromStack);&#10;        return topCard === card &amp;&amp; this.tableau.isStackEmpty(toStack);&#10;    }&#10;&#10;    removeCard(stackIndex) {&#10;        const topCard = this.tableau.getTopCard(stackIndex);&#10;        if (!topCard || topCard.getRank() === 'A') {&#10;            return false;&#10;        }&#10;        if (this.canRemove(topCard, stackIndex)) {&#10;            this.moveHistory.addMove(new Move('remove', { card: topCard, fromStack: stackIndex }));&#10;            this.tableau.removeTopCard(stackIndex);&#10;            this.gameState.incrementMoves();&#10;            this.render();&#10;            this.updateButtons();&#10;            this.checkEndgameConditions();&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    moveCard(fromStack, toStack) {&#10;        const card = this.tableau.getTopCard(fromStack);&#10;        if (this.canMove(card, fromStack, toStack)) {&#10;            this.moveHistory.addMove(new Move('move', { card: card, fromStack: fromStack, toStack: toStack }));&#10;            const movedCard = this.tableau.removeTopCard(fromStack);&#10;            this.tableau.addCardToStack(toStack, movedCard);&#10;            this.gameState.incrementMoves();&#10;            this.render();&#10;            this.updateButtons();&#10;            this.checkEndgameConditions();&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    handleCardClick(card, stackIndex) {&#10;        if (this.gameState.gameWon || this.gameState.gameLost) {&#10;            return;&#10;        }&#10;        this.gameState.startGame();&#10;        this.clearHintHighlight();&#10;&#10;        if (!this.gameState.selectedCard) {&#10;            if (this.removeCard(stackIndex)) {&#10;                return;&#10;            }&#10;            this.gameState.selectCard(card, stackIndex);&#10;            this.render();&#10;        } else {&#10;            if (this.gameState.selectedStack === stackIndex) {&#10;                this.gameState.clearSelection();&#10;                this.render();&#10;            } else {&#10;                if (this.tableau.isStackEmpty(stackIndex)) {&#10;                    if (this.moveCard(this.gameState.selectedStack, stackIndex)) {&#10;                        this.gameState.clearSelection();&#10;                    }&#10;                } else {&#10;                    if (this.removeCard(stackIndex)) {&#10;                        this.gameState.clearSelection();&#10;                        return;&#10;                    }&#10;                    this.gameState.selectCard(card, stackIndex);&#10;                    this.render();&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    handleEmptyStackClick(stackIndex) {&#10;        if (this.gameState.gameWon || this.gameState.gameLost) {&#10;            return;&#10;        }&#10;        if (this.gameState.selectedCard) {&#10;            if (this.moveCard(this.gameState.selectedStack, stackIndex)) {&#10;                this.gameState.clearSelection();&#10;            }&#10;        }&#10;    }&#10;&#10;    undo() {&#10;        const move = this.moveHistory.getUndoMove();&#10;        if (!move) return;&#10;        console.log(&quot;undid deal!&quot;);&#10;        console.log(move.data);&#10;&#10;        switch (move.type) {&#10;            case 'deal':&#10;                for (let i = 3; i &gt;= 0; i--) {&#10;                    if (!this.tableau.isStackEmpty(i)) {&#10;                        const card = this.tableau.removeTopCard(i);&#10;                        this.deck.addCardToTop(card);&#10;                    }&#10;                }&#10;                break;&#10;            case 'remove':&#10;                this.tableau.addCardToStack(move.data.fromStack, move.data.card);&#10;                break;&#10;            case 'move':&#10;                const card = this.tableau.removeTopCard(move.data.toStack);&#10;                this.tableau.addCardToStack(move.data.fromStack, card);&#10;                break;&#10;        }&#10;&#10;        this.gameState.decrementMoves();&#10;        this.gameState.clearSelection();&#10;        this.clearHintHighlight();&#10;        this.render();&#10;        this.updateButtons();&#10;        this.checkEndgameConditions();&#10;    }&#10;&#10;    redo() {&#10;        const move = this.moveHistory.getRedoMove();&#10;        if (!move) return;&#10;&#10;        console.log(&quot;redid deal!&quot;);&#10;        console.log(move.data);&#10;        &#10;        switch (move.type) {&#10;            case 'deal':&#10;                for (let i = 0; i &lt; 4; i++) {&#10;                    if (!this.deck.isEmpty()) {&#10;                        const card = this.deck.drawCard();&#10;                        this.ensureCardFaceUp(card);&#10;                        this.tableau.addCardToStack(i, card);&#10;                    }&#10;                }&#10;                break;&#10;            case 'remove':&#10;                this.tableau.removeTopCard(move.data.fromStack);&#10;                break;&#10;            case 'move':&#10;                const card = this.tableau.removeTopCard(move.data.fromStack);&#10;                this.tableau.addCardToStack(move.data.toStack, card);&#10;                break;&#10;        }&#10;&#10;        this.gameState.incrementMoves();&#10;        this.gameState.clearSelection();&#10;        this.clearHintHighlight();&#10;        this.render();&#10;        this.updateButtons();&#10;        this.checkEndgameConditions();&#10;    }&#10;&#10;    checkWin() {&#10;        const allCards = this.tableau.getAllCards();&#10;        if (allCards.length === 4) {&#10;            return allCards.every(card =&gt; card.getRank() === 'A');&#10;        }&#10;        return false;&#10;    }&#10;&#10;    checkLoss() {&#10;        if (!this.deck.isEmpty()) {&#10;            return false;&#10;        }&#10;        for (let i = 0; i &lt; 4; i++) {&#10;            const topCard = this.tableau.getTopCard(i);&#10;            if (topCard &amp;&amp; this.canRemove(topCard, i)) {&#10;                return false;&#10;            }&#10;        }&#10;        for (let fromStack = 0; fromStack &lt; 4; fromStack++) {&#10;            const topCard = this.tableau.getTopCard(fromStack);&#10;            if (topCard) {&#10;                for (let toStack = 0; toStack &lt; 4; toStack++) {&#10;                    if (fromStack !== toStack &amp;&amp; this.canMove(topCard, fromStack, toStack)) {&#10;                        return false;&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        return true;&#10;    }&#10;&#10;    checkEndgameConditions() {&#10;        if (this.checkWin()) {&#10;            this.gameState.gameWon = true;&#10;            this.showMessage(&quot;Congrats! You won! :D&quot;, &quot;success&quot;);&#10;        } else if (this.checkLoss()) {&#10;            this.gameState.gameLost = true;&#10;            this.showMessage(&quot;Game Over! It's okay, better luck next time :(&quot;, &quot;failure&quot;);&#10;        }&#10;    }&#10;&#10;    showMessage(text, type) {&#10;        this.messageArea.textContent = text;&#10;        this.messageArea.className = &quot;&quot;;&#10;        this.messageArea.classList.add(type);&#10;        this.messageArea.classList.remove(&quot;hidden&quot;);&#10;    }&#10;&#10;    hideMessage() {&#10;        this.messageArea.classList.add(&quot;hidden&quot;);&#10;    }&#10;&#10;    ensureCardFaceUp(card) {&#10;        if (!card.getVisible()) {&#10;            card.flip();&#10;        }&#10;    }&#10;&#10;    clearHintHighlight() {&#10;        if (this.hintTimeout) {&#10;            clearTimeout(this.hintTimeout);&#10;            this.hintTimeout = null;&#10;        }&#10;        this.gameState.hintCard = null;&#10;        this.gameState.hintStack = null;&#10;        this.hintStockpile = false;&#10;    }&#10;&#10;    updateButtons() {&#10;        const undoBtn = document.getElementById(&quot;undo-btn&quot;);&#10;        const redoBtn = document.getElementById(&quot;redo-btn&quot;);&#10;&#10;        if (undoBtn) {&#10;            if (this.moveHistory.canUndo()) {&#10;                undoBtn.disabled = false;&#10;            } else {&#10;                undoBtn.disabled = true;&#10;            }&#10;        }&#10;&#10;        if (redoBtn) {&#10;            if (this.moveHistory.canRedo()) {&#10;                redoBtn.disabled = false;&#10;            } else {&#10;                redoBtn.disabled = true;&#10;            }&#10;        }&#10;    }&#10;&#10;    render() {&#10;        for (let i = 0; i &lt; 4; i++) {&#10;            const stackElement = this.stackElements[i];&#10;            stackElement.innerHTML = &quot;&quot;;&#10;            const stack = this.tableau.getStack(i);&#10;&#10;            if (stack.length === 0) {&#10;                stackElement.addEventListener(&quot;click&quot;, () =&gt; this.handleEmptyStackClick(i));&#10;                const emptyIndicator = document.createElement(&quot;div&quot;);&#10;                emptyIndicator.classList.add(&quot;empty-indicator&quot;);&#10;                emptyIndicator.textContent = &quot;Empty&quot;;&#10;                stackElement.appendChild(emptyIndicator);&#10;            } else {&#10;                stackElement.style.cursor = &quot;default&quot;;&#10;                stack.forEach((card, index) =&gt; {&#10;                    const cardElement = document.createElement(&quot;img&quot;);&#10;                    if (card.getVisible()) {&#10;                        cardElement.src = &quot;assets/&quot; + card.getImageRef();&#10;                    } else {&#10;                        cardElement.src = &quot;assets/cardBackRed.png&quot;;&#10;                    }&#10;                    cardElement.classList.add(&quot;card&quot;);&#10;                    cardElement.style.top = `${index * 28}px`;&#10;                    cardElement.style.zIndex = index;&#10;&#10;                    if (this.gameState.selectedCard === card) {&#10;                        cardElement.classList.add(&quot;selected-card&quot;);&#10;                    }&#10;                    if (this.gameState.hintCard === card) {&#10;                        cardElement.classList.add(&quot;hint-card&quot;);&#10;                    }&#10;&#10;                    if (index === stack.length - 1) {&#10;                        cardElement.style.cursor = &quot;pointer&quot;;&#10;                        cardElement.addEventListener(&quot;click&quot;, () =&gt; this.handleCardClick(card, i));&#10;                    }&#10;&#10;                    stackElement.appendChild(cardElement);&#10;                });&#10;            }&#10;        }&#10;&#10;        this.stockElement.innerHTML = &quot;&quot;;&#10;        if (!this.deck.isEmpty()) {&#10;            const stockImg = document.createElement(&quot;img&quot;);&#10;            stockImg.src = &quot;assets/cardBackRed.png&quot;;&#10;&#10;            this.stockElement.classList.remove(&quot;empty&quot;);&#10;            if (this.hintStockpile) {&#10;                stockImg.classList.add(&quot;hint-card&quot;);&#10;            }&#10;            this.stockElement.appendChild(stockImg);&#10;&#10;            // Add stock counter&#10;            const stockCounter = document.createElement(&quot;div&quot;);&#10;            stockCounter.id = &quot;stock-counter&quot;;&#10;            stockCounter.textContent = this.deck.getSize();&#10;            this.stockElement.appendChild(stockCounter);&#10;&#10;            this.stockElement.style.cursor = &quot;pointer&quot;;&#10;        } else {&#10;            this.stockElement.classList.add(&quot;empty&quot;);&#10;            this.stockElement.textContent = &quot;Empty&quot;;&#10;            this.stockElement.style.cursor = &quot;default&quot;;&#10;        }&#10;    }&#10;&#10;    showHint() {&#10;        this.clearHintHighlight();&#10;&#10;        for (let i = 0; i &lt; 4; i++) {&#10;            const topCard = this.tableau.getTopCard(i);&#10;            if (topCard &amp;&amp; this.canRemove(topCard, i)) {&#10;                this.gameState.hintCard = topCard;&#10;                this.gameState.hintStack = i;&#10;                this.render();&#10;                this.hintTimeout = setTimeout(() =&gt; {&#10;                    this.clearHintHighlight();&#10;                    this.render();&#10;                }, 2000);&#10;                return;&#10;            }&#10;        }&#10;        for (let fromStack = 0; fromStack &lt; 4; fromStack++) {&#10;            const topCard = this.tableau.getTopCard(fromStack);&#10;            if (topCard) {&#10;                for (let toStack = 0; toStack &lt; 4; toStack++) {&#10;                    if (fromStack !== toStack &amp;&amp; this.canMove(topCard, fromStack, toStack)) {&#10;                        this.gameState.hintCard = topCard;&#10;                        this.gameState.hintStack = fromStack;&#10;                        this.render();&#10;                        this.hintTimeout = setTimeout(() =&gt; {&#10;                            this.clearHintHighlight();&#10;                            this.render();&#10;                        }, 2000);&#10;                        return;&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        if (!this.deck.isEmpty()) {&#10;            this.hintStockpile = true;&#10;            this.render();&#10;            this.hintTimeout = setTimeout(() =&gt; {&#10;                this.clearHintHighlight();&#10;                this.render();&#10;            }, 2000);&#10;        }&#10;    }&#10;}&#10;&#10;window.addEventListener(&quot;DOMContentLoaded&quot;, () =&gt; {&#10;    const game = new Game();&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/cardgame.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/cardgame.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;Aces Up - Omar H 2025&lt;/title&gt;&#10;    &lt;script defer src=&quot;card-v2.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script defer src=&quot;deck-v2.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script defer src=&quot;acesup.js&quot;&gt;&lt;/script&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;div id=&quot;gameboard&quot;&gt;&#10;&#10;    &lt;header id=&quot;header&quot;&gt;&#10;        &lt;div id=&quot;header-left&quot;&gt;&#10;            &lt;button id=&quot;newgame-btn&quot;&gt;New Game&lt;/button&gt;&#10;            &lt;button id=&quot;hint-btn&quot;&gt;Hint&lt;/button&gt;&#10;            &lt;button id=&quot;undo-btn&quot;&gt;Undo&lt;/button&gt;&#10;            &lt;button id=&quot;redo-btn&quot;&gt;Redo&lt;/button&gt;&#10;        &lt;/div&gt;&#10;        &lt;div id=&quot;header-right&quot;&gt;&#10;            &lt;div class=&quot;info-box&quot; id=&quot;moves&quot;&gt;Moves: 0&lt;/div&gt;&#10;            &lt;div class=&quot;info-box&quot; id=&quot;timer&quot;&gt;Time: 0s&lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/header&gt;&#10;&#10;    &lt;div id=&quot;game-area&quot;&gt;&#10;        &lt;div id=&quot;tableau&quot;&gt;&#10;            &lt;div class=&quot;stack&quot; id=&quot;stack-1&quot;&gt;&lt;/div&gt;&#10;            &lt;div class=&quot;stack&quot; id=&quot;stack-2&quot;&gt;&lt;/div&gt;&#10;            &lt;div class=&quot;stack&quot; id=&quot;stack-3&quot;&gt;&lt;/div&gt;&#10;            &lt;div class=&quot;stack&quot; id=&quot;stack-4&quot;&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div id=&quot;stock&quot;&gt;&#10;            &lt;div id=&quot;stockpile&quot;&gt;&#10;                Stock&#10;                &lt;div id=&quot;stock-counter&quot;&gt;52&lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div id=&quot;message-area&quot; class=&quot;hidden&quot;&gt;&lt;/div&gt;&#10;&#10;&lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;Aces Up - Omar H 2025&lt;/title&gt;&#10;    &lt;script defer src=&quot;card-v2.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script defer src=&quot;deck-v2.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script defer src=&quot;acesup.js&quot;&gt;&lt;/script&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;div id=&quot;gameboard&quot;&gt;&#10;&#10;    &lt;header id=&quot;header&quot;&gt;&#10;        &lt;div id=&quot;header-left&quot;&gt;&#10;            &lt;button id=&quot;newgame-btn&quot;&gt;New Game&lt;/button&gt;&#10;            &lt;button id=&quot;hint-btn&quot;&gt;Hint&lt;/button&gt;&#10;            &lt;button id=&quot;undo-btn&quot;&gt;Undo&lt;/button&gt;&#10;            &lt;button id=&quot;redo-btn&quot;&gt;Redo&lt;/button&gt;&#10;        &lt;/div&gt;&#10;        &lt;div id=&quot;header-right&quot;&gt;&#10;            &lt;div class=&quot;info-box&quot; id=&quot;moves&quot;&gt;Moves: 0&lt;/div&gt;&#10;            &lt;div class=&quot;info-box&quot; id=&quot;timer&quot;&gt;Time: 0s&lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/header&gt;&#10;&#10;    &lt;div id=&quot;game-area&quot;&gt;&#10;        &lt;div id=&quot;tableau&quot;&gt;&#10;            &lt;div class=&quot;stack&quot; id=&quot;stack-1&quot;&gt;&lt;/div&gt;&#10;            &lt;div class=&quot;stack&quot; id=&quot;stack-2&quot;&gt;&lt;/div&gt;&#10;            &lt;div class=&quot;stack&quot; id=&quot;stack-3&quot;&gt;&lt;/div&gt;&#10;            &lt;div class=&quot;stack&quot; id=&quot;stack-4&quot;&gt;&lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div id=&quot;stock&quot;&gt;&#10;            &lt;div id=&quot;stockpile&quot;&gt;&#10;                Stock&#10;                &lt;div id=&quot;stock-counter&quot;&gt;52&lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;div id=&quot;message-area&quot; class=&quot;hidden&quot;&gt;&lt;/div&gt;&#10;&#10;&lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/style.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/style.css" />
              <option name="originalContent" value="html, body {&#10;    height: 100%;&#10;    width: 100%;&#10;    overflow: hidden;&#10;}&#10;&#10;body {&#10;    background: url(&quot;assets/bg.png&quot;) center center no-repeat;&#10;    background-size: cover;&#10;}&#10;&#10;#game-area {&#10;    display: flex;&#10;    flex-direction: row;&#10;    justify-content: center;&#10;    align-items: flex-start;&#10;    gap: 40px;&#10;}&#10;&#10;#tableau {&#10;    display: flex;&#10;    flex-direction: row;&#10;    gap: 32px;&#10;    margin: 40px 0 0 0;&#10;}&#10;&#10;.stack {&#10;    position: relative;&#10;    width: 80px;&#10;    height: 350px;&#10;    background: rgba(255,255,255,0.05);&#10;    border-radius: 10px;&#10;    box-shadow: 0 1px 4px rgba(0,0,0,0.08);&#10;}&#10;&#10;.card {&#10;    position: absolute;&#10;    left: 0;&#10;    width: 80px;&#10;    height: auto;&#10;    max-width: 100%;&#10;    display: block;&#10;    box-shadow: 0 2px 8px rgba(0,0,0,0.2);&#10;    border-radius: 8px;&#10;    transition: all 0.3s ease;&#10;    z-index: 1;&#10;}&#10;&#10;.stack.empty-target {&#10;    background: rgba(255, 255, 255, 0.15);&#10;    box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);&#10;}&#10;&#10;#stock {&#10;    display: flex;&#10;    flex-direction: column;&#10;    align-items: center;&#10;    margin-left: 40px;&#10;}&#10;&#10;#stockpile {&#10;    width: 80px;&#10;    height: 120px;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    background: none;&#10;    border-radius: 8px;&#10;    box-shadow: 0 2px 8px rgba(0,0,0,0.1);&#10;    margin-top: 40px;&#10;    position: relative;&#10;}&#10;&#10;#stockpile img {&#10;    width: 80px;&#10;    height: auto;&#10;    border-radius: 8px;&#10;    box-shadow: 0 2px 8px rgba(0,0,0,0.2);&#10;}&#10;&#10;#stockpile.empty {&#10;    background: rgba(255,255,255,0.2);&#10;    color: #333;&#10;    font-weight: bold;&#10;    font-size: 1.1em;&#10;}&#10;&#10;#stock-counter {&#10;    position: absolute;&#10;    top: -8px;&#10;    right: -8px;&#10;    background: rgba(0, 0, 0, 0.8);&#10;    color: white;&#10;    font-size: 12px;&#10;    font-weight: bold;&#10;    padding: 4px 6px;&#10;    border-radius: 10px;&#10;    min-width: 20px;&#10;    text-align: center;&#10;    pointer-events: none;&#10;    box-shadow: 0 2px 4px rgba(0,0,0,0.3);&#10;    z-index: 10;&#10;}&#10;&#10;.empty-indicator {&#10;    width: 100%;&#10;    height: 100%;&#10;    border: 2px dashed rgba(255, 255, 255, 0.3);&#10;    border-radius: 8px;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    color: rgba(255, 255, 255, 0.5);&#10;    font-size: 12px;&#10;}&#10;&#10;.selected-card {&#10;    filter: brightness(1.3) drop-shadow(0 0 10px yellow);&#10;}&#10;&#10;.hint-card {&#10;    filter: brightness(1.3) drop-shadow(0 0 10px #ff5640);&#10;}&#10;&#10;#message-area {&#10;    position: fixed;&#10;    top: 50%;&#10;    left: 50%;&#10;    transform: translate(-50%, -50%);&#10;    background: rgba(0, 0, 0, 0.9);&#10;    color: white;&#10;    padding: 20px;&#10;    border-radius: 10px;&#10;    font-size: 18px;&#10;    text-align: center;&#10;    z-index: 1000;&#10;}&#10;&#10;.hidden {&#10;    display: none;&#10;}&#10;&#10;#message-area.success {&#10;    background: rgba(0, 150, 0, 0.9);&#10;}&#10;#message-area.failure {&#10;    background: rgba(150, 0, 0, 0.9);&#10;}&#10;&#10;" />
              <option name="updatedContent" value="html, body {&#10;    height: 100%;&#10;    width: 100%;&#10;    overflow: hidden;&#10;}&#10;&#10;body {&#10;    background: url(&quot;assets/bg.png&quot;) center center no-repeat;&#10;    background-size: cover;&#10;}&#10;&#10;#game-area {&#10;    display: flex;&#10;    flex-direction: row;&#10;    justify-content: center;&#10;    align-items: flex-start;&#10;    gap: 40px;&#10;}&#10;&#10;#tableau {&#10;    display: flex;&#10;    flex-direction: row;&#10;    gap: 32px;&#10;    margin: 40px 0 0 0;&#10;}&#10;&#10;.stack {&#10;    position: relative;&#10;    width: 80px;&#10;    height: 350px;&#10;    background: rgba(255,255,255,0.05);&#10;    border-radius: 10px;&#10;    box-shadow: 0 1px 4px rgba(0,0,0,0.08);&#10;}&#10;&#10;.card {&#10;    position: absolute;&#10;    left: 0;&#10;    width: 80px;&#10;    height: auto;&#10;    max-width: 100%;&#10;    display: block;&#10;    box-shadow: 0 2px 8px rgba(0,0,0,0.2);&#10;    border-radius: 8px;&#10;    transition: all 0.3s ease;&#10;    z-index: 1;&#10;}&#10;&#10;.stack.empty-target {&#10;    background: rgba(255, 255, 255, 0.15);&#10;    box-shadow: 0 0 8px rgba(255, 255, 255, 0.3);&#10;}&#10;&#10;#stock {&#10;    display: flex;&#10;    flex-direction: column;&#10;    align-items: center;&#10;    margin-left: 40px;&#10;}&#10;&#10;#stockpile {&#10;    width: 80px;&#10;    height: 120px;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    background: none;&#10;    border-radius: 8px;&#10;    box-shadow: 0 2px 8px rgba(0,0,0,0.1);&#10;    margin-top: 40px;&#10;    position: relative;&#10;}&#10;&#10;#stockpile img {&#10;    width: 80px;&#10;    height: auto;&#10;    border-radius: 8px;&#10;    box-shadow: 0 2px 8px rgba(0,0,0,0.2);&#10;}&#10;&#10;#stockpile.empty {&#10;    background: rgba(255,255,255,0.2);&#10;    color: #333;&#10;    font-weight: bold;&#10;    font-size: 1.1em;&#10;}&#10;&#10;#stock-counter {&#10;    position: absolute;&#10;    top: -8px;&#10;    right: -8px;&#10;    background: rgba(0, 0, 0, 0.8);&#10;    color: white;&#10;    font-size: 12px;&#10;    font-weight: bold;&#10;    padding: 4px 6px;&#10;    border-radius: 10px;&#10;    min-width: 20px;&#10;    text-align: center;&#10;    pointer-events: none;&#10;    box-shadow: 0 2px 4px rgba(0,0,0,0.3);&#10;    z-index: 10;&#10;}&#10;&#10;.empty-indicator {&#10;    width: 100%;&#10;    height: 100%;&#10;    border: 2px dashed rgba(255, 255, 255, 0.3);&#10;    border-radius: 8px;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    color: rgba(255, 255, 255, 0.5);&#10;    font-size: 12px;&#10;}&#10;&#10;.selected-card {&#10;    filter: brightness(1.3) drop-shadow(0 0 10px yellow);&#10;}&#10;&#10;.hint-card {&#10;    filter: brightness(1.3) drop-shadow(0 0 10px #ff5640);&#10;}&#10;&#10;#message-area {&#10;    position: fixed;&#10;    top: 50%;&#10;    left: 50%;&#10;    transform: translate(-50%, -50%);&#10;    background: rgba(0, 0, 0, 0.9);&#10;    color: white;&#10;    padding: 20px;&#10;    border-radius: 10px;&#10;    font-size: 18px;&#10;    text-align: center;&#10;    z-index: 1000;&#10;}&#10;&#10;.hidden {&#10;    display: none;&#10;}&#10;&#10;#message-area.success {&#10;    background: rgba(0, 150, 0, 0.9);&#10;}&#10;#message-area.failure {&#10;    background: rgba(150, 0, 0, 0.9);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>